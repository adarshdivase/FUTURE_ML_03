name: Train Rasa Model

# Triggers: Run on push to main, PRs, and allow manual triggering
on:
  push:
    branches:
      - main
    paths:
      - 'data/**'
      - 'domain.yml'
      - 'config.yml'
      - 'requirements.txt'
  pull_request:
    branches:
      - main
    paths:
      - 'data/**'
      - 'domain.yml'
      - 'config.yml'
      - 'requirements.txt'
  workflow_dispatch:  # Allow manual triggering

jobs:
  train-model:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent jobs from running indefinitely
    
    steps:
    # 1. Check out repository code
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # 2. Set up Python with caching
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    
    # 3. Install dependencies with better error handling
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Check if requirements.txt exists and install dependencies
        if [ -f requirements.txt ]; then
          echo "Installing from requirements.txt..."
          
          # First, try to install all dependencies
          pip install -r requirements.txt || {
            echo "Some dependencies failed to install. Trying alternatives..."
            
            # Create a filtered requirements file without problematic packages
            grep -v "streamlit-cookies-manager" requirements.txt > requirements_filtered.txt || true
            
            # Add the correct package name if needed
            if grep -q "streamlit-cookies-manager" requirements.txt; then
              echo "streamlit-cookie-manager>=0.2.0" >> requirements_filtered.txt
            fi
            
            # Install filtered requirements
            pip install -r requirements_filtered.txt
          }
        else
          echo "No requirements.txt found. Installing Rasa..."
          pip install rasa==3.6.0
        fi
        
        # Ensure Rasa is installed
        pip install rasa==3.6.0 --upgrade
    
    # 4. Validate Rasa configuration
    - name: Validate Rasa Configuration
      run: |
        # Check if domain.yml exists
        if [ ! -f "domain.yml" ]; then
          echo "Warning: domain.yml not found. Skipping validation."
          exit 0
        fi
        
        rasa data validate --domain domain.yml
    
    # 5. Train the model with error handling
    - name: Train Rasa Model
      run: |
        # Check if training data exists
        if [ ! -d "data" ] || [ -z "$(find data -name '*.yml' -o -name '*.yaml' 2>/dev/null)" ]; then
          echo "Error: No training data found in data/ directory"
          exit 1
        fi
        
        echo "Starting Rasa training..."
        rasa train --verbose
        
        # Check if model was created successfully
        if [ ! -d "models" ] || [ -z "$(ls -A models)" ]; then
          echo "Error: No model was generated"
          exit 1
        fi
        
        echo "Training completed successfully!"
        ls -la models/
    
    # 6. Test the trained model (optional but recommended)
    - name: Test Trained Model
      run: |
        # Run tests if test stories exist
        if [ -f "tests/test_stories.yml" ]; then
          echo "Running tests..."
          rasa test --stories tests/test_stories.yml
        else
          echo "No test stories found. Skipping tests."
        fi
    
    # 7. Upload trained model with better organization
    - name: Upload Trained Model
      uses: actions/upload-artifact@v4
      with:
        name: trained-rasa-model-${{ github.sha }}
        path: models/
        retention-days: 30
    
    # 8. Upload test results if available
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.sha }}
        path: results/
        retention-days: 7
      continue-on-error: true  # Don't fail the workflow if results don't exist
    
    # 9. Create summary
    - name: Create Summary
      if: always()
      run: |
        echo "## Rasa Model Training Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "models" ] && [ -n "$(ls -A models)" ]; then
          echo "- **Model**: $(ls models/ | head -1)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "results/intent_report.json" ]; then
          echo "- **Test Results**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        fi
